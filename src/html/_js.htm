<script src="js/app.min.js"></script>

<script src="https://code.jquery.com/jquery-3.6.1.js" integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI="
	crossorigin="anonymous"></script>
<script src="https://unpkg.com/js-datepicker"></script>

<script>
	const datePickerWithRange = () => {
		let firstDate = null;
		let secondDate = null;

		const updateWatcher = (status) => {
			if (status) {
				window.addEventListener('click', watcher);
			} else {
				window.removeEventListener('click', watcher);
			}
		}

		const getDays = (instance) => {
			return instance.calendarContainer.querySelectorAll('.qs-square[data-direction="0"]');
		}

		const closePicker = () => {
			dateFromPicker.alwaysShow = false;
			dateFromPicker.hide();
			updateWatcher(false);
		}

		const watcher = (e) => {
			let target = e.target;

			if (!target.closest('.qs-datepicker-container') && target !== document.getElementById('author-date-from') && !target.classList.contains('qs-arrow') && !target.classList.contains('qs-overlay-month') && !target.classList.contains('qs-submit')) {
				closePicker();
			}
		};

		const checkFilled = (el) => {
			if (el.value.length) {
				el.classList.add('filled');
				el.parentNode.classList.add('filled');
			} else {
				el.classList.remove('filled');
				el.parentNode.classList.remove('filled');
			}
		};

		const setRange = (instance) => {
			const days = getDays(instance);

			if (firstDate < secondDate) {
				days.forEach((d, i) => {
					if (firstDate.getMonth() === secondDate.getMonth()) {
						if (i + 1 >= firstDate.getDate() && i + 1 < secondDate.getDate()) {
							d.classList.add('qs-active');
						}
					} else {
						if (i + 1 < secondDate.getDate()) {
							d.classList.add('qs-active');
						}
					}
				});
			} else {
				days.forEach((d, i) => {
					if (firstDate.getMonth() === secondDate.getMonth()) {
						if (i + 1 <= firstDate.getDate() && i + 1 > secondDate.getDate()) {
							d.classList.add('qs-active');
						}
					} else {
						if (i + 1 > secondDate.getDate()) {
							d.classList.add('qs-active');
						}
					}
				});
			}

			closePicker();

			// use firstDate and secondDate data js objects for farther logic here
			// ...
		};

		const updateRange = (instance) => {
			const days = getDays(instance);

			if (firstDate < secondDate) {
				if (instance.currentYear === secondDate.getFullYear() && instance.currentYear === firstDate.getFullYear()) {

					if (firstDate.getMonth() < instance.currentMonth && instance.currentMonth < secondDate.getMonth()) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled')) {
								day.classList.add('qs-active');
							}
						});
					} else if (firstDate.getMonth() === instance.currentMonth && secondDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && firstDate.getDate() <= i + 1 && i + 1 <= secondDate.getDate()) {
								day.classList.add('qs-active');
							}
						});
					} else if (firstDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && firstDate.getDate() <= i + 1) {
								day.classList.add('qs-active');
							}
						});
					} else if (secondDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && secondDate.getDate() >= i + 1) {
								day.classList.add('qs-active');
							}
						});
					}
				}

				if (instance.currentYear === secondDate.getFullYear() && instance.currentYear > firstDate.getFullYear()) {
					if (instance.currentMonth < secondDate.getMonth()) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled')) {
								day.classList.add('qs-active');
							}
						});
					} else if (secondDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && secondDate.getDate() >= i + 1) {
								day.classList.add('qs-active');
							}
						});
					}
				}

				if (instance.currentYear < secondDate.getFullYear() && instance.currentYear === firstDate.getFullYear()) {
					if (instance.currentMonth > firstDate.getMonth()) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled')) {
								day.classList.add('qs-active');
							}
						});
					} else if (firstDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && firstDate.getDate() <= i + 1) {
								day.classList.add('qs-active');
							}
						});
					}
				}

			} else {
				if (instance.currentYear === secondDate.getFullYear() && instance.currentYear === firstDate.getFullYear()) {

					if (firstDate.getMonth() > instance.currentMonth && instance.currentMonth > secondDate.getMonth()) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled')) {
								day.classList.add('qs-active');
							}
						});
					} else if (firstDate.getMonth() === instance.currentMonth && secondDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && firstDate.getDate() >= i + 1 && i + 1 >= secondDate.getDate()) {
								day.classList.add('qs-active');
							}
						});
					} else if (secondDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && secondDate.getDate() <= i + 1) {
								day.classList.add('qs-active');
							}
						});
					} else if (firstDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && firstDate.getDate() >= i + 1) {
								day.classList.add('qs-active');
							}
						});
					}
				}

				if (instance.currentYear === firstDate.getFullYear() && instance.currentYear > secondDate.getFullYear()) {
					if (instance.currentMonth < firstDate.getMonth()) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled')) {
								day.classList.add('qs-active');
							}
						});
					} else if (firstDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && firstDate.getDate() >= i + 1) {
								day.classList.add('qs-active');
							}
						});
					}
				}

				if (instance.currentYear < firstDate.getFullYear() && instance.currentYear === secondDate.getFullYear()) {
					if (instance.currentMonth > secondDate.getMonth()) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled')) {
								day.classList.add('qs-active');
							}
						});
					} else if (secondDate.getMonth() === instance.currentMonth) {
						days.forEach((day, i) => {
							if (!day.classList.contains('qs-disabled') && secondDate.getDate() <= i + 1) {
								day.classList.add('qs-active');
							}
						});
					}
				}
			}
		};

		const resetRange = (instance) => {
			const days = getDays(instance);

			days.forEach((d, i) => {
				if (!instance.dateSelected || i + 1 !== instance.dateSelected.getDate()) {
					d.classList.remove('qs-active');
				}
			});
		}

		const dateFromPicker = datepicker('#author-date-from', {
			onShow: instance => {
				instance.alwaysShow = true;
				updateWatcher(true);
			},
			onSelect: (instance, date) => {
				if (firstDate && secondDate) {
					firstDate = null;
					secondDate = null;
					resetRange(instance);
				}

				if (firstDate && !secondDate && date) {
					secondDate = date;
					setRange(instance);
				}

				if (!firstDate) {
					firstDate = date;
				}

				if (firstDate && !date) {
					firstDate = null;
				}

				checkFilled(instance.el);
			},
			onHide: instance => {
				console.log(instance);
			},
			onMonthChange: instance => {
				updateRange(instance);
			},
			formatter: (input, date) => {
				let value = '';

				if (secondDate) {
					value = '';
				} else if (firstDate && date) {
					const dayF = firstDate.getDate(),
						monthF = firstDate.getMonth() > 8 ? firstDate.getMonth() + 1 : `0${firstDate.getMonth() + 1}`,
						yearF = firstDate.getFullYear().toString().slice(-2),
						dayS = date.getDate(),
						monthS = date.getMonth() > 8 ? date.getMonth() + 1 : `0${date.getMonth() + 1}`,
						yearS = date.getFullYear().toString().slice(-2);

					if (firstDate < date) {
						if (firstDate.getFullYear() !== date.getFullYear()) {
							value = dayF + '.' + monthF + '.' + yearF + ' - ' + dayS + '.' + monthS + '.' + yearS;
						} else {
							value = dayF + '.' + monthF + ' - ' + dayS + '.' + monthS;
						}
					} else {
						if (firstDate.getFullYear() !== date.getFullYear()) {
							value = dayS + '.' + monthS + '.' + yearS + ' - ' + dayF + '.' + monthF + '.' + yearF;
						} else {
							value = dayS + '.' + monthS + ' - ' + dayF + '.' + monthF;
						}
					}
				} else if (firstDate) {
					value = `${firstDate.getDate()}.${firstDate.getMonth() > 8 ? firstDate.getMonth() + 1 : `0${firstDate.getMonth() + 1}`}`;
				} else {
					value = `${date.getDate()}.${date.getMonth() > 8 ? date.getMonth() + 1 : `0${date.getMonth() + 1}`}`;
				}

				input.value = value;
			},
			overlayPlaceholder: new Date().getFullYear().toString(),
			customMonths: [
				'January',
				'February',
				'March',
				'April',
				'May',
				'June',
				'July',
				'August',
				'September',
				'October',
				'November',
				'December',
			],
			customDays: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
			disabler: (date) => date.getTime() <= new Date(Date.now() - 86400000),
		});
	};

	datePickerWithRange();
</script>